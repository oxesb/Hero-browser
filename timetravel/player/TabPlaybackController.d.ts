import { ITabDetails, ITick } from '@ulixee/hero-core/apis/Session.ticks';
import { IPaintEvent } from '@ulixee/hero-core/models/DomChangesTable';
import BrowserContext from '@ulixee/unblocked-agent/lib/BrowserContext';
import Page from '@ulixee/unblocked-agent/lib/Page';
import MirrorNetwork from '../lib/MirrorNetwork';
import MirrorPage from '../lib/MirrorPage';
export default class TabPlaybackController {
    private readonly tabDetails;
    private readonly mirrorNetwork;
    private readonly sessionId;
    get id(): number;
    get ticks(): ITick[];
    get currentTick(): ITick;
    get nextTick(): ITick;
    get previousTick(): ITick;
    get nextTimelineOffsetPercent(): number;
    get previousTimelineOffsetPercent(): number;
    get isOpen(): boolean;
    get focusedPaintIndexes(): [start: number, end: number];
    currentTimelineOffsetPct: number;
    isPlaying: boolean;
    currentTickIndex: number;
    readonly mirrorPage: MirrorPage;
    focusedOffsetRange: [start: number, end: number];
    private events;
    private paintEventsLoadedIdx;
    private focusedTickRange;
    constructor(tabDetails: ITabDetails, mirrorNetwork: MirrorNetwork, sessionId: string, debugLogging?: boolean);
    updateTabDetails(tabDetails: ITabDetails): Promise<void>;
    isPage(id: string): boolean;
    open(browserContext: BrowserContext, onPage?: (page: Page) => Promise<void>): Promise<void>;
    play(onTick?: (tick: ITick) => void): Promise<void>;
    pause(): void;
    close(): Promise<void>;
    setFocusedOffsetRange(offsetRange: [start: number, end: number]): void;
    findClosestTickIndex(timelineOffset: number): number;
    setTimelineOffset(timelineOffset: number): Promise<void>;
    loadEndState(): Promise<void>;
    loadTick(newTickOrIdx: number | ITick, specificTimelineOffset?: number): Promise<void>;
    showStatusText(text: string): Promise<void>;
    getPaintEventAtIndex(index: number): IPaintEvent;
    private static tabDetailsToDomRecording;
}
